{"version":3,"sources":["action/user.action.ts","api/apiConfig.js","api/UserApi.ts","component/Header.tsx","css/actionButtonStyle.ts","component/LoginPage.tsx","component/RegistrationPage.tsx","selector/user.selector.ts","api/MatchApi.ts","model/PlayerRole.ts","action/answer.action.ts","component/DashboardPage.tsx","component/ProtectedRoute.tsx","component/AnswerCard.tsx","component/JudgeView.tsx","selector/answer.selector.ts","component/PlayerView.tsx","component/GamePage.tsx","component/JoinMatchPage.tsx","App.tsx","serviceWorker.ts","reducer/user.reducer.ts","reducer/answer.reducer.ts","index.tsx","store/Store.ts"],"names":["changeRole","role","type","userBaseUrl","loginRequest","username","password","a","body","pwd","axios","post","apiConfig","registerRequest","user","Header","props","className","title","options","IconButton","edge","color","actionButtonStyle","makeStyles","root","background","minWidth","label","LoginPage","useState","setUsername","setPassword","history","useHistory","dispatch","useDispatch","buttonStyle","Container","maxWidth","TextField","id","margin","variant","value","onChange","e","target","InputProps","startAdornment","autoComplete","Button","classes","size","onClick","then","response","data","console","log","localStorage","setItem","jwt","push","catch","reason","to","defaultUser","email","name","surname","Alert","elevation","RegistrationPage","setUser","snackbarEnabled","setSnackbarEnabled","registrationSuccess","setRegistrationSuccess","persist","prevState","successful","Snackbar","open","autoHideDuration","onClose","severity","getUsername","state","getUserRole","matchBaseUrl","interceptors","request","use","config","headers","Authorization","getItem","PlayerRole","createMatch","joinMatch","matchId","getInitialCard","getJudgeCard","initList","answers","DashboardPage","useSelector","JUDGE","ProtectedRoute","redirectPath","isAuthenticated","authenticationPath","component","pathname","render","undefined","AnswerCard","text","buttonFunction","JudgeView","client","judgeCard","setJudgeCard","setAnswers","subscriptionId","setSubscriptionId","roundFinished","setRoundFinished","pingId","setPingId","useEffect","connected","subscribe","message","answerReceived","JSON","parse","setInterval","send","clearInterval","replace","map","index","key","card","stringify","unsubscribe","Dialog","aria-labelledby","DialogTitle","disconnect","PLAYER","getAllAnswer","answer","PlayerView","playerId","waiting","setWaiting","textToShow","setTextToShow","nextRole","setNextRole","cardSubscription","winnerSubscriber","CheckCircle","fontSize","style","green","Clear","red","answerList","deleteAnswer","CircularProgress","sendPlayerCard","disabled","GamePage","match","params","sockJs","WebSocket","Stomp","over","connect","JoinMatchPage","setMatchId","event","preventDefault","VideogameAsset","App","path","exact","Boolean","window","location","hostname","defaultUserState","userReducer","action","defaultAnswerState","answerReducer","concat","filter","store","createStore","combineReducers","composeWithDevTools","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.3e6862ba.chunk.js","sourcesContent":["import {IUser} from \"../model/IUser\";\nimport {PlayerRole} from \"../model/PlayerRole\";\n\nexport const login = (user: IUser) => ({\n    type: \"LOGIN\",\n    user\n});\n\nexport const logout = () => ({\n    type: \"LOGOUT\"\n});\n\nexport const changeRole = (role: PlayerRole) => ({\n    type: \"CHANGE_ROLE\",\n    role\n})","export default {\n    \"BASE_URL\": \"https://match-fun-words.herokuapp.com\",\n    \"USER_BASE\": \"/user\",\n    \"LOGIN\": \"/login\",\n    \"REGISTER\": \"/register\",\n\n    \"MATCH_BASE\": \"/match\",\n    \"CREATE_MATCH\": \"/\",\n    \"JOIN_MATCH\": \"/join\",\n    \"GET_INITIAL_CARD\": \"/card\",\n    \"GET_JUDGE_CARD\": \"/judge\"\n}","import axios from 'axios';\nimport apiConfig from \"./apiConfig\";\nimport {IUserRegister} from \"../model/IUserRegister\";\n\n\nconst userBaseUrl = apiConfig.USER_BASE;\n\n/**\n * This API try to log in the user\n * @param username the user's username\n * @param password the user's password\n * @return the user object with its info or null if the user doesn't exist\n */\nexport const loginRequest = async (username: string, password: string) => {\n    const body = {\n        username,\n        pwd: password\n    };\n\n    return axios.post(\n        userBaseUrl + apiConfig.LOGIN,\n        body);\n};\n\nexport const registerRequest = async (user: IUserRegister) => {\n    return axios.post(\n        userBaseUrl + apiConfig.REGISTER,\n        user\n    );\n}","import React, {ReactElement} from \"react\";\nimport '../css/header.css';\nimport MoreIcon from '@material-ui/icons/MoreVert';\nimport {IconButton} from \"@material-ui/core\";\n\ntype HeaderProps = {\n    title: string\n    options?: ReactElement\n}\n\nexport const Header = (props: HeaderProps) => (\n    <div className={\"header\"}>\n        <div className={\"div-title\"}>\n            <span className=\"rainbow-text\">{props.title}</span>\n        </div>\n        {\n            props.options ? <div className={\"div-option\"}>\n                    <IconButton edge=\"end\" color=\"inherit\">\n                        <MoreIcon/>\n                    </IconButton>\n                </div> :\n                <div></div>\n        }\n\n    </div>\n);","import { makeStyles } from '@material-ui/core/styles';\n\nexport const actionButtonStyle = makeStyles({\n    root: {\n        background: 'linear-gradient(263deg, rgba(2,0,36,1) 0%, rgba(79,119,189,1) 45%, rgba(0,212,255,1) 100%)',\n        minWidth: \"218px\"\n    },\n    label: {\n        color: 'whitesmoke'\n    }\n})","import React, {useState} from \"react\";\nimport {useDispatch} from \"react-redux\";\nimport {IUser} from \"../model/IUser\";\nimport {login} from \"../action/user.action\";\nimport {Link, useHistory} from \"react-router-dom\";\nimport {loginRequest} from \"../api/UserApi\";\nimport Button from \"@material-ui/core/Button\";\nimport PersonIcon from \"@material-ui/icons/Person\";\nimport VpnKeyIcon from '@material-ui/icons/VpnKey';\nimport {Container, TextField} from \"@material-ui/core\";\nimport {Header} from \"./Header\";\nimport {actionButtonStyle} from \"../css/actionButtonStyle\";\nimport \"../css/login.css\"\n\nconst LoginPage: React.FC = () => {\n    const [username, setUsername] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const history = useHistory();\n    const dispatch = useDispatch();\n    const buttonStyle = actionButtonStyle();\n\n    const doLogin = () => {\n        loginRequest(username, password)\n            .then(response => {\n                const body : IUser = response.data;\n                if (body != null) {\n                    console.log(body);\n                    localStorage.setItem(\"jwt\", body.jwt)\n                    dispatch(login(body));\n                    history.push(\"/dashboard\")\n                }\n            })\n            .catch(reason => console.log(reason));\n    };\n\n    return (\n        <Container className=\"page\" maxWidth={\"md\"}>\n            <Header title={\"Match fun words\"}/>\n            <div className={\"page-content\"}>\n                <TextField\n                    id={\"username\"}\n                    label={\"Username\"}\n                    margin={\"normal\"}\n                    variant={\"outlined\"}\n                    value={username}\n                    onChange={(e) => setUsername(e.target.value)}\n                    InputProps={{\n                        startAdornment: (\n                            <PersonIcon/>\n                        )\n                    }}\n                />\n                <br/>\n                <TextField\n                    id={\"password\"}\n                    label={\"Password\"}\n                    type={\"password\"}\n                    autoComplete={\"current-password\"}\n                    margin={\"normal\"}\n                    variant={\"outlined\"}\n                    value={password}\n                    onChange={e => setPassword(e.target.value)}\n                    InputProps={{\n                        startAdornment: (\n                            <VpnKeyIcon/>\n                        )\n                    }}\n                />\n                <br/>\n                <br/>\n                <Button\n                    classes={{\n                        root: buttonStyle.root,\n                        label: buttonStyle.label\n                    }}\n                    size={\"large\"}\n                    variant={\"text\"}\n                    onClick={doLogin}>\n                    login\n                </Button>\n                <br/><br/>\n                <div className={\"redirect-register-div\"}>\n                    New user?<br/>\n                    <b><Link to={\"/register\"}>Register now!</Link></b>\n                </div>\n            </div>\n        </Container>\n    );\n};\n\nexport default LoginPage;","import React, {useState} from \"react\";\nimport {Container, Snackbar, TextField} from \"@material-ui/core\";\nimport {Header} from \"./Header\";\nimport {IUserRegister} from \"../model/IUserRegister\";\nimport Button from \"@material-ui/core/Button\";\nimport {registerRequest} from \"../api/UserApi\";\nimport {useHistory} from \"react-router-dom\";\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert';\nimport {actionButtonStyle} from \"../css/actionButtonStyle\";\n\nconst defaultUser: IUserRegister = {\n    email: \"\",\n    name: \"\",\n    password: \"\",\n    surname: \"\",\n    username: \"\"\n}\n\nconst Alert = (props: AlertProps) => {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nconst RegistrationPage: React.FC = () => {\n\n    const [user, setUser] = useState<IUserRegister>(defaultUser);\n    const [snackbarEnabled, setSnackbarEnabled] = useState<boolean>(false);\n    const [registrationSuccess, setRegistrationSuccess] = useState(false);\n    const history = useHistory();\n    const buttonStyle = actionButtonStyle();\n\n    const doRegister = () => {\n        registerRequest(user)\n            .then(response => {\n                const successful: boolean = response.data;\n                console.log(successful);\n                setSnackbarEnabled(() => true);\n                setRegistrationSuccess(successful);\n\n\n            })\n    }\n\n    const handleClose = () => {\n        setSnackbarEnabled(() => false);\n        if (registrationSuccess) {\n            history.push(\"/login\");\n        }\n    }\n\n    return (\n        <Container className={\"page\"} maxWidth={\"md\"}>\n            <Header title={\"Join\"}/>\n            <div className={\"page-content\"}>\n                <TextField\n                    id={\"username\"}\n                    label={\"Username\"}\n                    type={\"text\"}\n                    margin={\"normal\"}\n                    variant={\"outlined\"}\n                    value={user.username}\n                    onChange={e => {\n                        e.persist();\n                        setUser(prevState => ({...prevState, username: e.target.value}))\n                    }}\n                />\n                <br/>\n                <TextField\n                    id={\"email\"}\n                    label={\"Email\"}\n                    type={\"text\"}\n                    margin={\"normal\"}\n                    variant={\"outlined\"}\n                    value={user.email}\n                    onChange={e => {\n                        e.persist();\n                        setUser(prevState => ({...prevState, email: e.target.value}))\n                    }}\n                />\n                <br/>\n                <TextField\n                    id={\"name\"}\n                    label={\"Name\"}\n                    type={\"text\"}\n                    margin={\"normal\"}\n                    variant={\"outlined\"}\n                    value={user.name}\n                    onChange={e => {\n                        e.persist();\n                        setUser(prevState => ({...prevState, name: e.target.value}))\n                    }}\n                />\n                <br/>\n                <TextField\n                    id={\"surname\"}\n                    label={\"Surname\"}\n                    type={\"text\"}\n                    margin={\"normal\"}\n                    variant={\"outlined\"}\n                    value={user.surname}\n                    onChange={e => {\n                        e.persist();\n                        setUser(prevState => ({...prevState, surname: e.target.value}))\n                    }}\n                />\n                <br/>\n                <TextField\n                    id={\"password\"}\n                    label={\"Password\"}\n                    type={\"password\"}\n                    margin={\"normal\"}\n                    variant={\"outlined\"}\n                    value={user.password}\n                    onChange={e => {\n                        e.persist();\n                        setUser(prevState => ({...prevState, password: e.target.value}))\n                    }}\n                />\n                <br/>\n                <br/>\n                <Button\n                    size={\"large\"}\n                    variant={\"text\"}\n                    classes={{\n                        root: buttonStyle.root,\n                        label: buttonStyle.label\n                    }}\n                    onClick={doRegister}>\n                    Register\n                </Button>\n            </div>\n\n            <Snackbar open={snackbarEnabled} autoHideDuration={3000} onClose={handleClose}>\n                <Alert severity={registrationSuccess ? \"success\" : \"error\"}>\n                    {\n                        registrationSuccess ?\n                            \"Registrazione effettuata con successo\" :\n                            \"Registrazione non andata a buon fine\"\n                    }\n                </Alert>\n            </Snackbar>\n\n        </Container>\n    )\n}\n\nexport default RegistrationPage;","\nexport const getUsername = (state: any) => state.user.username\n\nexport const getUser = (state: any) => state.user\n\nexport const getUserRole = (state: any) => state.user.role\n\nexport const getUserToken = (state: any) => state.user.jwt","import axios from 'axios';\nimport apiConfig from \"./apiConfig\";\n\nconst matchBaseUrl = apiConfig.MATCH_BASE;\n\nconst getToken = () => localStorage.getItem(\"jwt\")\n\naxios.interceptors.request.use(function (config) {\n    config.headers.Authorization = \"Bearer \" + getToken();\n    return config;\n});\n\nexport const createMatch = async () => {\n\n    return axios.post(\n        matchBaseUrl + apiConfig.CREATE_MATCH\n    );\n}\n\nexport const joinMatch = async (matchId: string) => {\n    return axios.post(\n        matchBaseUrl + \"/\" + matchId + apiConfig.JOIN_MATCH\n    );\n}\n\nexport const getInitialCard = async (matchId: string) => {\n    return axios.post(\n        matchBaseUrl + \"/\" + matchId + apiConfig.GET_INITIAL_CARD\n    );\n}\n\nexport const getJudgeCard = async (matchId: string) => {\n    return axios.post(\n        matchBaseUrl + \"/\" + matchId + apiConfig.GET_JUDGE_CARD\n    );\n}","export enum PlayerRole {\n    PLAYER,\n    JUDGE\n}","import {IAnswerCard} from \"../model/IAnswerCard\";\n\nexport const initList = (answers: IAnswerCard[]) => ({\n    type: \"INIT\",\n    answers\n})\n\nexport const newAnswer = (answer: IAnswerCard) => ({\n    type: \"ADD\",\n    answer\n})\n\nexport const deleteAnswer = (answer: IAnswerCard) => ({\n    type: \"DELETE\",\n    answer\n})","import React from \"react\";\nimport {Button, Container} from \"@material-ui/core\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {getUsername} from \"../selector/user.selector\";\nimport {createMatch, getInitialCard} from \"../api/MatchApi\";\nimport {useHistory} from \"react-router-dom\";\nimport {changeRole} from \"../action/user.action\";\nimport {PlayerRole} from \"../model/PlayerRole\";\nimport {IAnswerCard} from \"../model/IAnswerCard\";\nimport {initList} from \"../action/answer.action\";\nimport {Header} from \"./Header\";\n\nconst DashboardPage: React.FC = () => {\n\n    const username = useSelector(getUsername);\n    const history = useHistory();\n    const dispatch = useDispatch();\n\n    const create = () => {\n        createMatch()\n            .then(response => {\n                const matchId = response.data;\n                console.log(matchId)\n                dispatch(changeRole(PlayerRole.JUDGE))\n                getInitialCard(matchId)\n                    .then(response => {\n                        console.log(response);\n                        const answers: IAnswerCard[] = response.data\n                        dispatch(initList(answers))\n                    })\n                history.push(\"/match/\" + matchId);\n            })\n            .catch(reason => console.log(reason))\n    }\n\n    const join = () => {\n        history.push(\"/join\");\n    }\n\n    return (\n        <Container className={\"page\"} maxWidth={\"md\"}>\n            <Header title={`Welcome ${username}`} />\n            <div className={\"page-content\"}>\n                <Button variant={\"outlined\"} color={\"primary\"} onClick={create}>Create a new match</Button>\n                <br/><br/>\n                <Button variant={\"outlined\"} color={\"primary\"} onClick={join}>Join a match</Button>\n            </div>\n        </Container>\n\n    );\n}\n\nexport default DashboardPage;","import {Redirect, Route, RouteProps} from \"react-router-dom\";\nimport React from \"react\";\n\nexport interface ProtectedRouteProps extends RouteProps {\n    isAuthenticated: boolean;\n    authenticationPath: string;\n}\n\nexport const ProtectedRoute: React.FC<ProtectedRouteProps> = props => {\n    let redirectPath = '';\n    if (!props.isAuthenticated) {\n        redirectPath = props.authenticationPath;\n    }\n\n    if (redirectPath) {\n        const renderComponent = () => <Redirect to={{ pathname: redirectPath }} />;\n        return <Route {...props} component={renderComponent} render={undefined} />;\n    } else {\n        return <Route {...props} />;\n    }\n};\n","import {PlayerRole} from \"../model/PlayerRole\";\nimport React from \"react\";\nimport \"../css/answerCard.css\"\nimport {Button} from \"@material-ui/core\";\n\ntype AnswerProps = {\n    text: string,\n    role: PlayerRole,\n    buttonFunction: () => void\n}\n\nexport const AnswerCard = ({text, role, buttonFunction}: AnswerProps) => (\n    <div className={\"answer-card-div\"}>\n        {text}\n        <Button className={\"send-btn\"} variant={\"text\"} color={\"primary\"} onClick={buttonFunction}>{role === PlayerRole.JUDGE ? \"CHOOSE\": \"SEND\"}</Button>\n    </div>\n)","import React, {PropsWithChildren, useEffect, useState} from \"react\";\nimport {Client} from \"stompjs\";\nimport {IAnswerCard} from \"../model/IAnswerCard\";\nimport {AnswerCard} from \"./AnswerCard\";\nimport {PlayerRole} from \"../model/PlayerRole\";\nimport {useDispatch} from \"react-redux\";\nimport {changeRole} from \"../action/user.action\";\nimport {IQuestionCard} from \"../model/IQuestionCard\";\nimport {getJudgeCard} from \"../api/MatchApi\";\nimport {Button, Dialog, DialogTitle} from \"@material-ui/core\";\nimport \"../css/judgeCard.css\"\n\ninterface JudgeProps extends PropsWithChildren<any> {\n    matchId: string,\n    client: Client\n}\n\nconst JudgeView: React.FC<JudgeProps> = ({matchId, client}) => {\n\n    const [judgeCard, setJudgeCard] = useState<IQuestionCard>();\n    const [answers, setAnswers] = useState<IAnswerCard[]>([]);\n    const [subscriptionId, setSubscriptionId] = useState(\"\")\n    const [roundFinished, setRoundFinished] = useState(false);\n    const [pingId, setPingId] = useState();\n    const dispatch = useDispatch()\n\n\n    useEffect(() => {\n        getJudgeCard(matchId)\n            .then(response => {\n                setJudgeCard(() => response.data);\n            })\n            .catch(reason => console.log(reason))\n    }, [matchId])\n\n\n    useEffect(() => {\n        if (client.connected) {\n            const {id} = client.subscribe(`/game/judge/${matchId}`, message => {\n                const answerReceived: IAnswerCard = JSON.parse(message.body);\n                setAnswers(prevState => [...prevState, answerReceived])\n            })\n            setSubscriptionId(() => id);\n            setPingId(() => setInterval(() => client.send(\"/\"), 50000));\n        } else {\n            clearInterval(pingId);\n        }\n    }, [matchId, client.connected])\n\n    const finishRound = () => {\n        client.disconnect(() => console.log(\"Websocket disconnected\"));\n        dispatch(changeRole(PlayerRole.PLAYER));\n    }\n\n    const choosePlayerCard = (card: IAnswerCard) => {\n        console.log(card);\n        client.send(`/app/match/${matchId}/judge/choose`, {}, JSON.stringify(card));\n        client.unsubscribe(subscriptionId);\n        setRoundFinished(true);\n    }\n\n    return (\n        <div>\n            <div>\n                <div className={\"judge-card-div\"}>\n                    {\n                        judgeCard ?\n                            judgeCard?.text.replace(\"{}\", \"___\") :\n                            <div/>\n                    }\n                </div>\n            </div>\n            <div className={\"page-content\"}>\n                {\n                    answers ?\n                        answers.map((value, index) => (<AnswerCard key={index} text={value.text} role={PlayerRole.JUDGE}\n                                                                   buttonFunction={() => choosePlayerCard(value)}/>)) :\n                        <div/>\n                }\n            </div>\n\n            <Dialog onClose={() => {\n            }} aria-labelledby=\"simple-dialog-title\" open={roundFinished}>\n                <DialogTitle id=\"simple-dialog-title\">Waiting for other player</DialogTitle>\n                <div>\n                    Vai al prossimo round <br/>\n                    <Button\n                        size={\"small\"}\n                        variant={\"outlined\"}\n                        onClick={finishRound}\n                        color={\"primary\"}>Next round</Button>\n                </div>\n            </Dialog>\n        </div>\n    )\n}\n\nexport default JudgeView;","\nexport const getAllAnswer = (state: any) => state.answer","import React, {PropsWithChildren, useEffect, useState} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {getAllAnswer} from \"../selector/answer.selector\";\nimport {IAnswerCard} from \"../model/IAnswerCard\";\nimport {getUsername} from \"../selector/user.selector\";\nimport {AnswerCard} from \"./AnswerCard\";\nimport {PlayerRole} from \"../model/PlayerRole\";\nimport {Client} from 'stompjs';\nimport {deleteAnswer, newAnswer} from \"../action/answer.action\";\nimport {Button, CircularProgress, Dialog, DialogTitle} from \"@material-ui/core\";\nimport {CheckCircle, Clear} from \"@material-ui/icons\";\nimport {green, red} from \"@material-ui/core/colors\";\nimport {changeRole} from \"../action/user.action\";\n\ninterface PlayerProps extends PropsWithChildren<any> {\n    matchId: string,\n    client: Client\n}\n\nconst PlayerView: React.FC<PlayerProps> = ({matchId, client}) => {\n    const playerId = useSelector(getUsername);\n\n    const dispatch = useDispatch();\n    const [waiting, setWaiting] = useState(false);\n    const [roundFinished, setRoundFinished] = useState(false);\n    const [textToShow, setTextToShow] = useState<JSX.Element>(() => (<div/>));\n    const [nextRole, setNextRole] = useState<PlayerRole>(PlayerRole.PLAYER);\n    const [pingId, setPingId] = useState();\n\n    useEffect(() => {\n        if (client.connected) {\n            const cardSubscription = client.subscribe(`/game/player/${matchId}/${playerId}`, message => {\n                const card: IAnswerCard = JSON.parse(message.body);\n                dispatch(newAnswer(card));\n                cardSubscription.unsubscribe();\n            });\n\n            const winnerSubscriber = client.subscribe(`/game/player/${matchId}`, message => {\n                const winnerCard: IAnswerCard = JSON.parse(message.body);\n                if (winnerCard.playerId === playerId) {\n                    setNextRole(PlayerRole.JUDGE);\n                    setTextToShow(() => (\n                        <div>\n                            <CheckCircle fontSize={\"large\"} style={{ color: green[500] }}/><br/>\n                            Complimenti hai vinto\n                        </div>\n                    ));\n                } else {\n                    setTextToShow(() => (\n                        <div>\n                            <Clear fontSize={\"large\"} style={{ color: red[500] }}/><br/>\n                            Peccato, hai perso\n                        </div>\n                    ));\n                }\n                winnerSubscriber.unsubscribe();\n                setRoundFinished(() => true);\n\n            });\n            setPingId(() => setInterval(() => client.send(\"/\"), 50000));\n        } else {\n            clearInterval(pingId);\n        }\n    }, [matchId, client.connected, playerId])\n\n\n    const answerList: IAnswerCard[] = useSelector(getAllAnswer);\n\n    const sendPlayerCard = (answer: IAnswerCard) => {\n        answer.playerId = playerId;\n        console.log(answer);\n        client.send(`/app/match/${matchId}/player/${playerId}/card`, {}, JSON.stringify(answer));\n        dispatch(deleteAnswer(answer));\n        setWaiting(() => true);\n        setTextToShow(() => (\n            <div>\n                <CircularProgress />\n            </div>\n        ));\n    }\n\n    const finishRound = () => {\n        dispatch(changeRole(nextRole));\n        client.disconnect(() => console.log(\"Websocket disconnected\"));\n    }\n\n    return (\n        <div>\n            {\n                answerList ?\n                    answerList.map((answer, index) => (\n                        <AnswerCard key={index} text={answer.text} role={PlayerRole.PLAYER}\n                                    buttonFunction={() => sendPlayerCard(answer)}/>)) :\n                    <div/>\n            }\n            <Dialog onClose={() => {\n            }} aria-labelledby=\"simple-dialog-title\" open={waiting}>\n                <DialogTitle id=\"simple-dialog-title\">Waiting for other player</DialogTitle>\n                <div>\n                    {textToShow}\n                    <Button\n                        disabled={!roundFinished}\n                        size={\"small\"}\n                        variant={\"outlined\"}\n                        onClick={finishRound}\n                        color={\"primary\"}>Next round</Button>\n                </div>\n            </Dialog>\n        </div>\n    );\n}\n\nexport default PlayerView;","import React, {useEffect, useState} from \"react\";\nimport {Container} from \"@material-ui/core\";\nimport {useSelector} from \"react-redux\";\nimport {getUserRole} from \"../selector/user.selector\";\nimport {PlayerRole} from \"../model/PlayerRole\";\nimport JudgeView from \"./JudgeView\";\nimport PlayerView from \"./PlayerView\";\nimport Stomp from \"stompjs\";\nimport {Header} from \"./Header\";\n\n\nconst GamePage: React.FC = (props: any) => {\n\n    console.log(props);\n    const matchId = props.match.params.matchId;\n    const role: PlayerRole = useSelector(getUserRole);\n\n    const sockJs = new WebSocket(\"wss://match-fun-words.herokuapp.com/match-fun-words\");\n    const client = Stomp.over(sockJs);\n    client.connect({}, () => {\n            console.log(\"connesso al websocket\");\n        }\n    );\n\n\n    return (\n        <Container className={\"page\"} maxWidth={\"md\"}>\n            <Header title={`${role === PlayerRole.JUDGE ? \"Giudice\" : \"Giocatore\"} ${matchId}`}/>\n            {\n                role === PlayerRole.JUDGE ?\n                    <JudgeView matchId={matchId} client={client}/> :\n                    <PlayerView matchId={matchId} client={client}/>\n            }\n        </Container>\n    )\n}\n\nexport default GamePage;","import React, {ChangeEvent, useState} from \"react\";\nimport {Button, Container, TextField} from \"@material-ui/core\";\nimport {useHistory} from \"react-router-dom\";\nimport {getInitialCard, joinMatch} from \"../api/MatchApi\";\nimport {IAnswerCard} from \"../model/IAnswerCard\";\nimport {initList} from \"../action/answer.action\";\nimport {useDispatch} from \"react-redux\";\nimport {changeRole} from \"../action/user.action\";\nimport {PlayerRole} from \"../model/PlayerRole\";\nimport {Header} from \"./Header\";\nimport {VideogameAsset} from \"@material-ui/icons\";\n\nconst JoinMatchPage: React.FC = () => {\n\n    const [matchId, setMatchId] = useState(\"\")\n    const history = useHistory()\n    const dispatch = useDispatch()\n\n    const handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\n        event.preventDefault();\n        setMatchId(event.target.value);\n    }\n\n    const join = () => {\n        joinMatch(matchId)\n            .then(response => {\n                if (response.data === true) {\n                    dispatch(changeRole(PlayerRole.PLAYER))\n                    getInitialCard(matchId)\n                        .then(response => {\n                            console.log(response);\n                            const answers: IAnswerCard[] = response.data\n                            dispatch(initList(answers))\n                        })\n                    history.push(\"/match/\" + matchId);\n                } else {\n                    console.log(\"Qualcosa è andato storto\")\n                }\n            })\n            .catch(reason => console.log(reason))\n    }\n\n    return (\n        <Container className={\"page\"} maxWidth={\"md\"}>\n            <Header title={\"Join match\"} />\n            <div className={\"page-content\"}>\n                <TextField\n                    label=\"Match Id\"\n                    variant=\"outlined\"\n                    onChange={handleInputChange}\n                    value={matchId}\n                    InputProps={{\n                        startAdornment: (\n                            <VideogameAsset/>\n                        )\n                    }}\n                />\n                <br/><br/>\n                <Button variant={\"outlined\"} color={\"primary\"} onClick={join}>Join</Button>\n            </div>\n\n        </Container>\n    )\n}\n\nexport default JoinMatchPage;","import React from 'react';\nimport './css/App.css';\nimport {BrowserRouter as Router, Route, Switch, Redirect} from 'react-router-dom'\nimport LoginPage from \"./component/LoginPage\";\nimport RegistrationPage from \"./component/RegistrationPage\";\nimport DashboardPage from \"./component/DashboardPage\";\nimport {ProtectedRoute} from \"./component/ProtectedRoute\";\nimport {useSelector} from \"react-redux\";\nimport {getUsername} from \"./selector/user.selector\";\nimport GamePage from \"./component/GamePage\";\nimport JoinMatchPage from \"./component/JoinMatchPage\";\n\n\nconst App: React.FC = () => {\n\n    const username = useSelector(getUsername);\n\n    return (\n        <div className=\"App\">\n            <Router>\n                <Switch>\n                    <Route path={\"/\"} exact>\n                        <Redirect to={\"/login\"}/>\n                    </Route>\n                    <Route path={\"/login\"} exact>\n                        <LoginPage/>\n                    </Route>\n                    <Route path={\"/register\"} exact>\n                        <RegistrationPage/>\n                    </Route>\n                    <ProtectedRoute isAuthenticated={username !== \"\"} authenticationPath={\"/login\"} exact={true} path={\"/dashboard\"} component={DashboardPage} />\n                    <ProtectedRoute isAuthenticated={username !== \"\"} authenticationPath={\"/login\"} exact={true} path={\"/match/:matchId\"} component={GamePage} />\n                    <ProtectedRoute isAuthenticated={username !== \"\"} authenticationPath={\"/login\"} exact={true} path={\"/join\"} component={JoinMatchPage} />\n                </Switch>\n            </Router>\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {IUser} from \"../model/IUser\";\nimport {PlayerRole} from \"../model/PlayerRole\";\n\nconst defaultUserState: IUser = {\n    name: \"\",\n    surname: \"\",\n    email: \"\",\n    username: \"\",\n    jwt: \"\",\n    role: PlayerRole.PLAYER\n};\n\nexport const userReducer = (state: IUser = defaultUserState, action: any) => {\n    switch (action.type) {\n        case \"LOGIN\":\n            return {\n                ...action.user\n            };\n        case \"LOGOUT\":\n            return {\n                ...defaultUserState\n            };\n        case \"CHANGE_ROLE\":\n            return {\n                ...state,\n                role: action.role\n            }\n        default:\n            return {\n                ...state\n            };\n    }\n};","import {IAnswerCard} from \"../model/IAnswerCard\";\n\nconst defaultAnswerState: IAnswerCard[] = []\n\nexport const answerReducer = (state: IAnswerCard[] = defaultAnswerState, action: any) => {\n    switch (action.type) {\n        case \"INIT\":\n            return [\n                ...action.answers\n            ]\n        case \"ADD\":\n            return [\n                ...state.concat(action.answer)\n            ]\n        case \"DELETE\":\n            return [\n                ...state.filter(value => value.text !== action.answer.text)\n            ]\n        default:\n            return [\n                ...state\n            ]\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport { Provider } from 'react-redux'\nimport * as serviceWorker from './serviceWorker';\nimport Store from \"./store/Store\";\n\nconst store = Store();\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, combineReducers } from \"redux\";\nimport {composeWithDevTools} from \"redux-devtools-extension\";\nimport {userReducer} from \"../reducer/user.reducer\";\nimport {answerReducer} from \"../reducer/answer.reducer\";\n\nexport default () => {\n    const store : any = createStore(\n        combineReducers({\n            user: userReducer,\n            answer: answerReducer\n        }),\n        composeWithDevTools()\n    );\n\n    return store;\n}"],"sourceRoot":""}